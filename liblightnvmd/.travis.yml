sudo: required

language: c

addons:
  apt:
    packages:
    - doxygen
    - graphviz
    - python-pip

services:
  - docker

env:
  global:
    - TAG=liblightnvm
    - NVM_VERSION="0.0.1"
    - DIST_NAME=ubuntu
  matrix:
    - DIST_VERS=16.04 DIST_CODE=xenial
    - DIST_VERS=14.04 DIST_CODE=trusty

branches:
  except:
    - gh-pages

before_install:
  - echo "** Lets get docking! **"
  - docker pull ${DIST_NAME}:${DIST_VERS}
  - docker build --rm=true --file=ci/DockerFile.${DIST_NAME}-${DIST_VERS} --tag=${DIST_NAME}-${DIST_VERS}:${TAG} .
  - docker run --name ${TAG} -d -t ${DIST_NAME}-${DIST_VERS}:${TAG} /bin/bash > container.id
  - docker ps -a
  - docker exec -t ${TAG} hostname
  - docker exec -t ${TAG} uname -a
  - docker exec -t ${TAG} cat /etc/lsb-release

before_script:
  - echo "Fetching checkpatch"
  - wget "https://raw.githubusercontent.com/torvalds/linux/master/scripts/checkpatch.pl" -O checkpatch.pl
  - chmod +x checkpatch.pl
  - ./checkpatch.pl --no-tree -f include/*nvm.h --terse || true
  - ./checkpatch.pl --no-tree -f include/nvm_*.h --terse || true
  - ./checkpatch.pl --no-tree -f src/*.c --terse || true
  - ./checkpatch.pl --no-tree -f examples/*.c --terse || true
  - ./checkpatch.pl --no-tree -f tests/*.c --terse || true

script:
  - CONTAINER_ID=$(cat container.id)
  - docker ps -a
  - docker exec -t ${TAG} make clean make-pkg
  - docker cp ${CONTAINER_ID}:/workdir/build/liblightnvm0-cli.deb .
  - docker cp ${CONTAINER_ID}:/workdir/build/liblightnvm0-dev.deb .
  - docker cp ${CONTAINER_ID}:/workdir/build/liblightnvm0-lib.deb .
  - docker cp ${CONTAINER_ID}:/workdir/build/liblightnvm0-cli.tar.gz .
  - docker cp ${CONTAINER_ID}:/workdir/build/liblightnvm0-dev.tar.gz .
  - docker cp ${CONTAINER_ID}:/workdir/build/liblightnvm0-lib.tar.gz .
  - docker stop "${CONTAINER_ID}"

after_success:
  - echo "** BUILDING AND DEPLOYING DOC TO GH-PAGES **"
  - export PATH=$HOME/.local/bin:$PATH
  - pip install --user sphinx sphinx_rtd_theme breathe sphinxcontrib-bibtex
  - openssl aes-256-cbc -K $encrypted_ab01438dce7a_key -iv $encrypted_ab01438dce7a_iv -in ci/lnvmdoxy_rsa.enc -out ~/.ssh/lnvmdoxy_rsa -d
  - eval "$(ssh-agent -s)"
  - chmod 0600 ~/.ssh/lnvmdoxy_rsa
  - ssh-add ~/.ssh/lnvmdoxy_rsa
  - echo "** Build and deploy DOC **"
  - make doc
  - if [ "$DIST_CODE" == "xenial" ]; then make doc-publish; fi

before_deploy:
  - python ci/bintray_descriptor.py --repos debs --dist_code $DIST_CODE --version ${NVM_VERSION} --branch ${TRAVIS_BRANCH} --commit ${TRAVIS_COMMIT} > ci/bintray_debs.json
  - python ci/bintray_descriptor.py --repos binaries --dist_code $DIST_CODE --version ${NVM_VERSION} --branch ${TRAVIS_BRANCH} --commit ${TRAVIS_COMMIT} > ci/bintray_binaries.json

deploy:
  - provider: bintray
    dry-run: false
    file: ci/bintray_debs.json
    user: safl
    key:
      secure: "HD1LvR4KL84u6BPQncH5brE8Ng7iBvsREaOra492AEMx4sL2F1ucMIXkvNE86tfBF0Q8b2Axz9PUuktqB8hwfE4Mj/NZcHQHlWrJ/vO4zMhY79K7tujZAQ9THH/IFmktE2gjQYr7FraTlwdIws2VGJj7jlCY9s0E/vmF/euwAHkmfuTpdLv0T2IrCkrt64EBsIFAmfjoSpuFJtNiJqDxtL9rtke6Voo+yvsrQmGgkaFQLM+bhIiOC8YVw/UaZPYFjAQPl2pFGI+pJGs8A+p1b6YD+/UJdzHj1C9QaSTg6orqQCw4iSK3IA1WpZt3+/K9p0fwqNp3KO2ituuw53xBPI2jc2EfI76vMi+RVjHSlMUmsfjU6W0SFTYxSX7PNablzvIYE+FpKyE3u3sMyTIjkc3jZFtuhZSpZ4b6NEtaV59NYknbFxny3xPZa8rEiZgQkle0zwTOnxDLTX0QD/BbMfciTMW3BhQKBT6X7UqfSMUhs8zA1ydluRYSiiSllYK7+JP2kmMKs9wBRQp/djx/ATRnv+p2Vw4RVJe5zqFWniqwFnqqt6xixd0X69OWx7VKoar4iBs1f7czvhXMzKtHrYJKYBRnFCEdB2jCHTHlqc/9D1PLbP56io8yF6O0kvhI0zF8SqFEzsZbyrZGrxjzAxy6JXv8DQ3lZnTbrvBuDR0="
  - provider: bintray
    dry-run: false
    file: ci/bintray_binaries.json
    user: safl
    key:
      secure: "HD1LvR4KL84u6BPQncH5brE8Ng7iBvsREaOra492AEMx4sL2F1ucMIXkvNE86tfBF0Q8b2Axz9PUuktqB8hwfE4Mj/NZcHQHlWrJ/vO4zMhY79K7tujZAQ9THH/IFmktE2gjQYr7FraTlwdIws2VGJj7jlCY9s0E/vmF/euwAHkmfuTpdLv0T2IrCkrt64EBsIFAmfjoSpuFJtNiJqDxtL9rtke6Voo+yvsrQmGgkaFQLM+bhIiOC8YVw/UaZPYFjAQPl2pFGI+pJGs8A+p1b6YD+/UJdzHj1C9QaSTg6orqQCw4iSK3IA1WpZt3+/K9p0fwqNp3KO2ituuw53xBPI2jc2EfI76vMi+RVjHSlMUmsfjU6W0SFTYxSX7PNablzvIYE+FpKyE3u3sMyTIjkc3jZFtuhZSpZ4b6NEtaV59NYknbFxny3xPZa8rEiZgQkle0zwTOnxDLTX0QD/BbMfciTMW3BhQKBT6X7UqfSMUhs8zA1ydluRYSiiSllYK7+JP2kmMKs9wBRQp/djx/ATRnv+p2Vw4RVJe5zqFWniqwFnqqt6xixd0X69OWx7VKoar4iBs1f7czvhXMzKtHrYJKYBRnFCEdB2jCHTHlqc/9D1PLbP56io8yF6O0kvhI0zF8SqFEzsZbyrZGrxjzAxy6JXv8DQ3lZnTbrvBuDR0="
